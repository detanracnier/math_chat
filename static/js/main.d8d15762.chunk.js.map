{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","connect","withCredentials","autoConnect","extraHeaders","App","useState","left","operator","right","answer","state","setState","equations","setEquations","on","console","log","err","useEffect","emit","className","onClick","e","type","target","name","value","disabled","equation","parseFloat","equationStr","String","slice","Math","max","length","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8d15762.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst socket = io.connect('wss://math-chat-plus.herokuapp.com',\n  {\n    withCredentials: true,\n    autoConnect: true,\n    extraHeaders: {\n      \"my-custom-header\": \"abcd\"\n    }\n  });\n\n\nfunction App() {\n\n  const [state, setState] = useState({ left: \"\", operator: \"\", right: \"\", answer: \"\" });\n  const [equations, setEquations] = useState([]);\n\n  socket.on('connect', () => {\n    console.log(\"Socket connected\");\n  })\n  socket.on('disconnect', () => {\n    console.log(\"Socket disconnect\");\n  })\n  socket.on('connect_error', (err) => {\n    console.log(\"Socket connect_error\");\n    console.log(err);\n  })\n  socket.on('reconnect_error', (err) => {\n    console.log(\"Socket reconnect_error\");\n    console.log(err);\n  })\n\n  useEffect(() => {\n    socket.on(\"calculate\", (equations) => {\n      setEquations(equations);\n    })\n  })\n\n  useEffect(()=>{\n    socket.emit(\"initialize\");\n  },[])\n\n  const handleButtonClick = (e) => {\n    const type = e.target.name;\n    if (type === \"number\") {\n      if(state.answer){\n        setState({left: e.target.value, operator: \"\", right: \"\", answer: \"\"});\n      } else if (state.operator) {\n        setState({ ...state, right: state.right + e.target.value });\n      } else {\n        setState({ ...state, left: state.left + e.target.value });\n      }\n    }\n    if (type === \"operator\") {\n      if (state.left) {\n        setState({ ...state, operator: e.target.value })\n      }\n    }\n  }\n\n  const handleClear = () => {\n    setState({ left: \"\", operator: \"\", right: \"\", answer: \"\" });\n  }\n\n  const handleSubmit = (e) => {\n    const equation = state;\n    let answer = \"\";\n    switch (equation.operator) {\n      case \"+\":\n        answer = parseFloat(equation.left) + parseFloat(equation.right);\n        break;\n      case \"-\":\n        answer = parseFloat(equation.left) - parseFloat(equation.right);\n        break;\n      case \"x\":\n        answer = parseFloat(equation.left) * parseFloat(equation.right);\n        break;\n      case \"รท\":\n        answer = parseFloat(equation.left) / parseFloat(equation.right);\n        break;\n      default:\n    }\n    setState({...state, answer: answer});\n    const equationStr = String(equation.left) + equation.operator + String(equation.right) + \"=\" + String(answer);\n    socket.emit(\"calculate\", equationStr)\n  }\n\n  const renderEquations = () => {\n    let equationsTrim = equations.slice(Math.max(equations.length-10, 0));\n    return equationsTrim.map((equation, index) => (\n      <div key={index}>\n        {equation}\n      </div>\n    ))\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"container bg-secondary\">\n              <div className=\"row pt-2\">\n                <div className=\"col bg-light rounded\">\n                  {state.left}{state.operator}{state.right}{state.answer ? \"=\"+state.answer : \"\"}</div>\n                <button className=\"col-3 calculatorButton rounded\" onClick={handleClear}>clear</button>\n              </div>\n              <div onClick={handleButtonClick}>\n                <div className=\"row\">\n                  <button className=\"col calculatorButton rounded\" name=\"number\" value=\"7\">7</button>\n                  <button className=\"col calculatorButton rounded\" name=\"number\" value=\"8\">8</button>\n                  <button className=\"col calculatorButton rounded\" name=\"number\" value=\"9\">9</button>\n                  <button className=\"col calculatorButton rounded\" disabled={state.operator} name=\"operator\" value=\"รท\">รท</button>\n                </div>\n                <div className=\"row\">\n                  <button className=\"col calculatorButton rounded\" name=\"number\" value=\"4\">4</button>\n                  <button className=\"col calculatorButton rounded\" name=\"number\" value=\"5\">5</button>\n                  <button className=\"col calculatorButton rounded\" name=\"number\" value=\"6\">6</button>\n                  <button className=\"col calculatorButton rounded\" disabled={state.operator} name=\"operator\" value=\"x\">x</button>\n                </div>\n                <div className=\"row\">\n                  <button className=\"col calculatorButton rounded\" name=\"number\" value=\"1\">1</button>\n                  <button className=\"col calculatorButton rounded\" name=\"number\" value=\"2\">2</button>\n                  <button className=\"col calculatorButton rounded\" name=\"number\" value=\"3\">3</button>\n                  <button className=\"col calculatorButton rounded\" disabled={state.operator} name=\"operator\" value=\"-\">-</button>\n                </div>\n                <div className=\"row pb-2\">\n                  <button className=\"col calculatorButton rounded\" name=\"number\" value=\"0\">0</button>\n                  <button className=\"col calculatorButton rounded\" name=\"number\" value=\".\">.</button>\n                  <button className=\"col calculatorButton rounded\" disabled={!state.right} onClick={handleSubmit}>=</button>\n                  <button className=\"col calculatorButton rounded\" disabled={state.operator} name=\"operator\" value=\"+\">+</button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col\">\n            <div className=\"render-equations\">\n              <h1>Equation Log</h1>\n              {renderEquations()}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}